                                  $ isetl.ini

!memory 500000

!unlock graphics
graphics := f where sysgraphics := graphics;
      f := func(b);
              if b then sysgraphics(true); end;
             end;
 end;
!lock graphics
   
!unlock is_integer
is_integer := func(x);
   return fix(x) = x;
end;
!lock is_integer
         
Pi := precision(6);
Pi := 3.141592654; 

!include axis.stl
!include zoomer.stl

graphpar := proc(F,a,b opt time);
      local fil;
      fil := openr("graphpar.stl");
      if graphpar_1 = om then
           read graphpar_1 from fil;
           fil := close(fil);
      end;
      graphpar_1(F,a,b,time);
end;

graphpol := proc(f,a,b);
      local fil;
      fil := openr("graphpol.stl");
      if graphpol_1 = om then
           read graphpol_1 from fil;
           fil := close(fil);
      end;
      graphpol_1(f,a,b);
end;

graphR := proc(f opt xlow, xhigh, ylow, yhigh);
      local fil;
      fil := openr("graphR.stl");
      if graphR_1 = om then
           read graphR_1 from fil;
           fil := close(fil);
      end;
      graphR_1(f, xlow, xhigh, ylow, yhigh);
end;

graphs:= proc(f, g, xlow, xhigh);
      local fil;
      fil := openr("graphs.stl");
      if graphs_1 = om then
           read graphs_1 from fil;
           fil := close(fil);
      end;
      graphs_1(f, g, xlow, xhigh);
end;

plot := proc(Fs opt xlow, xhigh, ylow, yhigh);
      local fil;
      fil := openr("plot.stl");
      if plot_1 = om then
           read plot_1 from fil;
           fil := close(fil);
      end;
      plot_1(Fs, xlow, xhigh, ylow, yhigh);
end;

vectors := proc(S opt arrow);
      local fil;
      fil := openr("vectors.stl");
      if vectors_1 = om then
           read vectors_1 from fil;
           fil := close(fil);
      end;
      vectors_1(S, arrow);
end;

pause := func(); 
    local c; 
    while c /= '\n' do 
        readf c:-1; 
    end;
end;

eul_ex := func(x,y);
      local xp, xm,e;
    if x < Pi then
      e := 0.05;
      if x < 0 or x > 3*Pi or y < 0 or y > 2 then return "Out of Range"; end;
      if y = 0  then 
             if  abs(x) < e or abs(x-2*Pi) < e then 
                       return "Vertical"; 
             else
                       return 0;
             end;
      end;
      
      xp  := abs(x-acos(1-y) + sqrt(2*y-y**2));
      xm := abs(x-acos(1-y) - sqrt(2*y-y**2));
     

      if xp = min(xp,xm) then 
                   return   sqrt(2*y-y**2)/y + xp;
      else 
                   return  -sqrt(2*y-y**2)/y + xm;
      end;
   else return -eul_ex(x-Pi,y);
   end;
end;

table := func(f,a,b,n opt test);

            test := test ? (func(x); return true; end);

            if is_func(f)  and
               is_number(a) and is_number(b) and
               is_number(n) and (n>0)  then
	       
	      
	      
	      printf 11*" ", "x", 28*" ", "f", 
	                                      "\n", "\n" ;
					      
	      P := [a + ((b-a)*(i-1))/n : i in [1..(n+1)]];
	      
	      for x in P do
            if test(x) then
	                printf x:13, "   ",f(x),  "\n";
            end;
	      end;
	      
	      close(fil);
	      return "Printing completed";
	      end;
	      return "No printing, data of wrong type";
	      end;

interpolate := func(s);  $ Error if s is an mmap

   if not(is_map(s)) or  domain(s) = {} then return;
   else     
        return func(x); 
            local a,b;
            if x < %min(domain(s)) or x > %max(domain(s)) then 
                   return;
            elseif x in domain(s) then
                   return s(x);
            else 
                  a := %max({u: u in domain(s) | u <= x});
                  b := %min({u: u in domain(s) | u  >  x});
                  return s(a) + (x-a)*(s(b)-s(a))/(b-a);
            end;
         end;
     end;
end;

!lock Pi	axes zoomer	graphpar	graphpol	graphR	graphs
!lock plot	vectors	pause	eul_ex	table interpolate	
